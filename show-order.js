// Generated by CoffeeScript 1.7.1
(function() {
  var acceptance, best_ranked, bests, completion_confidence, completion_patience, cooling_factor, evaluate, evaluators, hash, hash_object, is_in_item, items, mutator, mutator_list, mutators, name, new_order, new_score, no_progress_count, order, order_score, order_template, random_choice, random_int, repetition, repetitions, score, starting_temperature, store_order, tag_weights, temperature, weights, _i, _j, _len,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  items = [
    {
      name: '169',
      tags: ['crude', 'pun', 'sex'],
      actors: {
        'Henry Nguyen': {
          before: 5
        },
        'Nevin Lazarus': {
          before: 5
        },
        'Sylvia Chin': {
          before: 5
        }
      }
    }, {
      name: 'A Preset Occurrence',
      tags: ['satire'],
      actors: {
        'Nicola Sentinella': {
          before: 5
        },
        'Sylvia Chin': {
          before: 5
        },
        'Pierre Estephan': {
          before: 5
        },
        'Caroline Cham': {
          before: 5
        },
        'Octavia Soegyono': {
          before: 5
        }
      }
    }, {
      name: 'An Awkward Purchase',
      tags: ['crude', 'sex'],
      actors: {
        'Caroline Cham': {
          before: 5
        },
        'Pierre Estephan': {
          before: 5
        },
        'Nafiul Haque': {
          before: 5
        }
      }
    }, {
      name: 'Antiques Roadshow',
      tags: ['crazy'],
      actors: {
        'Alex Worsley': {
          before: 5
        },
        'Ben Pinto': {
          before: 5
        },
        'Lucas Pickup': {
          before: 5
        },
        'Yingran Sun': {
          before: 5
        }
      }
    }, {
      name: 'Bro',
      tags: ['gay'],
      actors: {
        'Henry Nguyen': {
          before: 5
        },
        'Nafiul Haque': {
          before: 5
        }
      }
    }, {
      name: 'Death Star Budget',
      tags: ['satire'],
      actors: {
        'Octavia Soegyono': {
          before: 5
        },
        'Vincent Tran': {
          before: 5
        },
        'Ben Pinto': {
          before: 5
        }
      }
    }, {
      name: 'Disk Jock',
      tags: ['crazy'],
      actors: {
        'Louis Sammuels': {
          before: 5
        },
        'Henry Nguyen': {
          before: 5
        }
      }
    }, {
      name: 'Fourth Wall',
      tags: ['crazy'],
      actors: {
        'Sherman Du': {
          before: 5
        },
        'Vinbob Tran': {
          before: 5
        }
      }
    }, {
      name: 'Frape',
      tags: ['crazy', 'gay', 'religion'],
      actors: {
        'Raj Kapoor': {
          before: 5
        },
        'Ben Pinto': {
          before: 5
        },
        'Nevin Lazarus': {
          before: 5
        }
      }
    }, {
      name: 'Girl\'s Night Out',
      tags: ['punch', 'sex'],
      actors: {
        'Yingran Sun': {
          before: 5
        },
        'Kitty Lee': {
          before: 5
        },
        'Sherman Du': {
          before: 5
        },
        'Daniel Lyons': {
          before: 5
        }
      }
    }, {
      name: 'Grandma in the way',
      tags: ['punch'],
      actors: {
        'Emmanuel Berkowicz': {
          before: 5
        },
        'Nicola Sentinella': {
          before: 5
        },
        'Emily Webster': {
          before: 5
        }
      }
    }, {
      name: 'HECS Games',
      tags: ['satire'],
      actors: {
        'Vanessa Ung': {
          before: 5
        },
        'Daniel Lyons': {
          before: 5
        }
      }
    }, {
      name: 'I\'d like to return my kid',
      tags: ['pun', 'punch'],
      actors: {
        'Michael Nam Lee': {
          before: 5
        },
        'Emily Webster': {
          before: 5
        }
      }
    }, {
      name: 'Love in the time of Coding',
      tags: ['punch', 'sex'],
      actors: {
        'Michael Nam Lee': {
          before: 5
        },
        'Kitty Lee': {
          before: 5
        },
        'Christina Truong': {
          before: 5
        }
      }
    }, {
      name: 'Modern Commandments',
      tags: ['satire', 'religion'],
      actors: {
        'Sherman Du': {
          before: 5
        },
        'Vincent Tran': {
          before: 5
        }
      }
    }, {
      name: 'Princess Missing',
      tags: ['punch', 'satire'],
      actors: {
        'Vanessa Ung': {
          before: 5
        },
        'Louis Sammuels': {
          before: 5
        },
        'Raj Kapoor': {
          before: 5
        },
        'Daniel Lyons': {
          before: 5
        },
        'Andrew Ha': {
          before: 5
        }
      }
    }, {
      name: 'Rock and a Hard Place',
      tags: ['pun'],
      actors: {
        'Alex Worsley': {
          before: 5
        },
        'Michael Nam Lee': {
          before: 5
        },
        'Sylvia Chin': {
          before: 5
        }
      }
    }, {
      name: 'Second-hand Salesman',
      tags: ['crazy'],
      actors: {
        'Daniel Lyons': {
          before: 5
        },
        'Henry Nguyen': {
          before: 5
        },
        'Yingran Sun': {
          before: 5
        },
        'Omair Ali': {
          before: 5
        },
        'Vanessa Ung': {
          before: 5
        },
        'Michael Nam Lee': {
          before: 5
        }
      }
    }, {
      name: 'Sunday School',
      tags: ['pun', 'punch', 'religion'],
      actors: {
        'Holly Shuttleworth': {
          before: 5
        },
        'Vincent Tran': {
          before: 5
        },
        'Andrew Ha': {
          before: 5
        }
      }
    }, {
      name: 'Terra Nullius',
      tags: ['punch', 'crazy'],
      actors: {
        'Nevin Lazarus': {
          before: 5
        },
        'Christina Truong': {
          before: 5
        }
      }
    }, {
      name: 'That Poor Kitty',
      tags: ['crazy', 'sex'],
      actors: {
        'Kitty Lee': {
          before: 5
        },
        'Nafiul Haque': {
          before: 5
        },
        'Omair Ali': {
          before: 5
        },
        'Vincent Tran': {
          before: 5
        }
      }
    }, {
      name: 'The Leak',
      tags: ['punch'],
      actors: {
        'Emmanuel Berkowicz': {
          before: 5
        },
        'Caroline Cham': {
          before: 5
        }
      }
    }, {
      name: 'The Macabre Family',
      tags: ['black', 'crude', 'sex'],
      actors: {
        'Lucas Pickup': {
          before: 5
        },
        'Nicola Sentinella': {
          before: 5
        }
      }
    }, {
      name: 'Under Construction',
      tags: ['crazy'],
      actors: {
        'Lucas Pickup': {
          before: 5
        },
        'Rhi Gordon': {
          before: 5
        },
        'Nevin Lazarus': {
          before: 5
        },
        'Vinbob Tran': {
          before: 5
        }
      }
    }, {
      name: 'Would You Kindly',
      tags: ['crazy'],
      actors: {
        'Emily Webster': {
          before: 5
        },
        'Alex Worsley': {
          before: 5
        },
        'Omair Ali': {
          before: 5
        },
        'Sylvia Chin': {
          before: 5
        }
      }
    }, {
      name: 'Happy',
      tags: ['musical'],
      actors: {
        'Nicola Sentinella': {
          before: 5
        },
        'Sherman Du': {
          before: 5
        },
        'Vincent Tran': {
          before: 5
        },
        'Caroline Cham': {
          before: 5
        },
        'Vanessa Ung': {
          before: 5
        }
      }
    }, {
      name: 'Africa',
      tags: ['musical'],
      actors: {
        'Yingran Sun': {
          before: 5
        },
        'Kitty Lee': {
          before: 5
        },
        'Octavia Soegyono': {
          before: 5
        },
        'Rhi Gordon': {
          before: 5
        },
        'Holly Shuttleworth': {
          before: 5
        },
        'Emily Webster': {
          before: 5
        },
        'Pierre Estephan': {
          before: 5
        },
        'Vinbob Tran': {
          before: 5
        }
      }
    }, {
      name: 'Consumer',
      tags: ['musical'],
      actors: {
        'Matthew McEwen': {
          before: 5
        },
        'Daniel Lyons': {
          before: 5
        },
        'Henry Nguyen': {
          before: 5
        },
        'Nafiul Haque': {
          before: 5
        },
        'Christina Truong': {
          before: 5
        },
        'Octavia Soegyono': {
          before: 5
        },
        'Sylvia Chin': {
          before: 5
        },
        'Rhi Gordon': {
          before: 5
        }
      }
    }
  ];

  Array.prototype.clone = function() {
    return this.slice(0);
  };

  is_in_item = function(person, item) {
    return item.actors[person] != null;
  };

  random_int = function(from, to) {
    return Math.floor(Math.random() * (to - from + 1) + from);
  };

  random_choice = function(list) {
    return list[Math.floor(Math.random() * list.length)];
  };

  hash_object = function(object) {
    return JSON.stringify(object);
  };

  tag_weights = {
    musical: 10
  };

  evaluators = {
    preparation: function(item, order, order_index) {
      var after, after_index, before, before_index, name, prep_time, score, _ref, _ref1, _ref2;
      score = 0;
      _ref = item.actors;
      for (name in _ref) {
        prep_time = _ref[name];
        before_index = order_index - 1;
        while (before_index >= 0 && !is_in_item(name, order[before_index])) {
          before_index--;
        }
        before = order_index - before_index - 1;
        after_index = order_index + 1;
        while (after_index < order.length && !is_in_item(name, order[after_index])) {
          after_index++;
        }
        after = after_index - order_index - 1;
        score += Math.min(before, (_ref1 = prep_time.before) != null ? _ref1 : 0);
        score += Math.min(after, (_ref2 = prep_time.after) != null ? _ref2 : 0);
      }
      return score;
    },
    genre_variation: function(item, order, order_index) {
      var after, after_index, before, before_index, max_score, score, tag, weight, _i, _len, _ref, _ref1;
      score = 0;
      _ref = item.tags;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        tag = _ref[_i];
        before_index = order_index - 1;
        while (before_index >= 0 && !(__indexOf.call(order[before_index].tags, tag) >= 0)) {
          before_index--;
        }
        before = order_index - before_index - 1;
        after_index = order_index + 1;
        while (after_index < order.length && !(__indexOf.call(order[after_index].tags, tag) >= 0)) {
          after_index++;
        }
        after = after_index - order_index - 1;
        weight = (_ref1 = tag_weights[tag]) != null ? _ref1 : 1;
        max_score = weight * 5;
        score += Math.min(before * weight, max_score);
        score += Math.min(after * weight, max_score);
      }
      return score;
    }
  };

  weights = {
    preparation: 1,
    genre_variation: 1
  };

  mutators = {
    shift: function(order) {
      var a, from, left, mid, right, shift, size, _i, _ref, _results;
      size = random_int(2, order.length);
      from = random_int(0, order.length - size);
      shift = random_int(1, size - 1);
      left = from;
      right = from + size;
      mid = left + shift;
      _results = [];
      for (a = _i = 0, _ref = order.length; 0 <= _ref ? _i < _ref : _i > _ref; a = 0 <= _ref ? ++_i : --_i) {
        if (a >= left && a < right) {
          if (a < mid) {
            a += right - mid;
          } else {
            a += left - mid;
          }
        }
        _results.push(order[a]);
      }
      return _results;
    }
  };

  mutator_list = (function() {
    var _results;
    _results = [];
    for (name in mutators) {
      mutator = mutators[name];
      _results.push(mutator);
    }
    return _results;
  })();

  evaluate = function(order) {
    var evaluator, index, item, score, _i, _len;
    score = 0;
    for (name in evaluators) {
      evaluator = evaluators[name];
      for (index = _i = 0, _len = order.length; _i < _len; index = ++_i) {
        item = order[index];
        score += weights[name] * evaluator(item, order, index);
      }
    }
    return score;
  };

  acceptance = function(current_score, new_score, temperature) {
    return current_score < new_score || Math.random() < Math.exp((new_score - 1 - current_score) / temperature);
  };

  store_order = function(bests, order, score) {
    return bests[hash_object(order)] = {
      order: order,
      score: score
    };
  };

  order_template = function(order) {
    var $table, $tr, cast, cast_list, item, _i, _j, _k, _l, _len, _len1, _len2, _len3;
    cast = {};
    for (_i = 0, _len = order.length; _i < _len; _i++) {
      item = order[_i];
      for (name in item.actors) {
        cast[name] = true;
      }
    }
    cast_list = (function() {
      var _results;
      _results = [];
      for (name in cast) {
        _results.push(name);
      }
      return _results;
    })();
    cast_list.sort();
    $table = $('<table>');
    $tr = $('<tr>');
    $tr.append($('<th>'));
    for (_j = 0, _len1 = cast_list.length; _j < _len1; _j++) {
      name = cast_list[_j];
      $tr.append($('<th>').text(name));
    }
    $table.append($tr);
    for (_k = 0, _len2 = order.length; _k < _len2; _k++) {
      item = order[_k];
      $tr = $('<tr>');
      $tr.append($('<th>').text(item.name));
      for (_l = 0, _len3 = cast_list.length; _l < _len3; _l++) {
        name = cast_list[_l];
        $tr.append($('<td>').addClass(is_in_item(name, item) ? 'tick' : 'cross'));
      }
      $table.append($tr);
    }
    return $table;
  };

  order = items.clone();

  score = evaluate(order);

  starting_temperature = 1000;

  cooling_factor = 0.95;

  repetitions = 25;

  bests = {};

  completion_confidence = 0.5;

  completion_patience = Math.log(1 - completion_confidence) / Math.log(1 - 1 / 4495);

  console.log('completion_patience', completion_patience, order.length);

  for (repetition = _i = 1; 1 <= repetitions ? _i <= repetitions : _i >= repetitions; repetition = 1 <= repetitions ? ++_i : --_i) {
    console.log('repetition', repetition);
    temperature = starting_temperature;
    no_progress_count = 0;
    while (no_progress_count < completion_patience) {
      new_order = random_choice(mutator_list)(order);
      new_score = evaluate(new_order);
      if (acceptance(score, new_score, temperature)) {
        no_progress_count = 0;
        order = new_order;
        score = new_score;
      } else {
        no_progress_count++;
      }
      temperature *= cooling_factor;
    }
    console.log('Score:', score, 'Temp:', temperature);
    store_order(bests, order, score);
  }

  best_ranked = ((function() {
    var _results;
    _results = [];
    for (hash in bests) {
      order = bests[hash];
      _results.push(order);
    }
    return _results;
  })()).sort(function(a, b) {
    return a.score - b.score;
  });

  for (_j = 0, _len = best_ranked.length; _j < _len; _j++) {
    order_score = best_ranked[_j];
    console.log(order_score.order, order_score.score);
  }

  $(function() {
    var $table;
    $table = order_template(best_ranked[best_ranked.length - 1].order);
    return $('body').append($table);
  });

}).call(this);
